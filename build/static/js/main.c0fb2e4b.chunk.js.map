{"version":3,"sources":["index.js","test/data.csv"],"names":["jsonData","require","$","get","csvData","csv","validator","obj","undefined","date","array","split","Date","toUTCString","slice","length","town","temperature","weather","data","totalData","lines","headers","result","i","currentline","console","log","j","push","csvToJson","forcast","buildJson","getUniqueList","attribute","includes","uniqueTowns","uniqueDates","townDropdown","dateDropdown","buildCard","searchTerm","searchResult","results","searchJson","identifier","document","getElementById","innerHTML","map","entry","attr","join","empty","each","value","append","text","querySelector","addEventListener","event","target","module","exports"],"mappings":"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","file":"static/js/main.c0fb2e4b.chunk.js","sourcesContent":["import $ from 'jquery';\nconst jsonData = require('./test/data.json');\n\n// on document load\n$(function(){\n    // read in data.csv\n    $.get(require('./test/data.csv'), function(csvData) {\n        let csv = csvData;\n        \n        // convert CSV file to JSON array\n        function csvToJson(csv) {\n            let lines=csv.split(\"\\n\");\n            let headers= lines[0].split(\",\");\n            let result = [];\n    \n            // loop through each line and split by \",\"\n            for (let i=1; i<lines.length; i++) {\n                let obj = {};\n                let currentline = lines[i].split(\",\");\n\n                // check for typos ie. extra/ not enough commas\n                if (currentline.length !== headers.length) {\n                    console.log(\"error: invalid format \" + currentline)\n                } else {\n                    // loop through currentline and assign to their respective attribute \n                    for (let j=0; j<headers.length; j++) {\n                        obj[headers[j]] = currentline[j];\n                    }\n        \n                    // push the resulting object into the JSON\n                    result.push(validator(obj));\n                }\n            }\n    \n            //return JSON\n            return result;\n        }\n\n        // validate and format data\n        function validator(obj) {\n            // If data is not available, replace it\n            if (obj.date === undefined || obj.date === '') {\n                obj.date = \"Date not available\";\n            } else {\n                // format date to be readable and consistant\n                let array = obj.date.split(\" \");\n                const date = new Date(array[0]);\n                obj.date = date.toUTCString().slice(0, date.toUTCString().length - 12) + \" \" + array[1] + \" \" + array[2];\n            }\n            if (obj.town === undefined || obj.town === '') {\n                obj.town = \"Location not available\";\n            }\n            if (obj.temperature === undefined || obj.temperature === '') {\n                obj.temperature = \"--\";\n            }\n            if (obj.weather === undefined || obj.weather === '') {\n                obj.weather = \"Weather not available\";\n            }\n            return obj;\n        }\n        \n        // build the JSON to be used\n        function buildJson() {\n            // run conversions \n            let totalData = csvToJson(csv);\n\n            // add on JSON file\n            for (var i=0; i<jsonData.forcast.length; i++) {\n                totalData.push(validator(jsonData.forcast[i]));\n            }\n\n            // return the JSON\n            return totalData;\n        }\n        \n        const data = (buildJson());\n\n        // build arrays of unique towns and dates for dropdowns\n        function getUniqueList(attribute) {\n            let array = [];\n\n            // loop through the json\n            for (var i=0; i<data.length; i++) {\n                // if the attribute (either town or date) doesn't already exist in array, add it\n                if (!array.includes(data[i][attribute])) {\n                    array.push(data[i][attribute]);\n                }\n            }\n            return array;\n        }\n\n        const uniqueTowns = getUniqueList('town');\n        const uniqueDates = getUniqueList('date');\n\n        // assign dropdowns to variables\n        let townDropdown = $('#town');\n        let dateDropdown = $('#date');\n\n        townDropdown.empty();\n        dateDropdown.empty();\n\n        // populate dropdowns with the unique towns and dates\n        $.each(uniqueTowns, function (i, value){\n            townDropdown.append($('<option></option>').attr('value', value).text(value));\n        })\n        $.each(uniqueDates, function (i, value) {\n            dateDropdown.append($('<option></option>').attr('value', value).text(value));\n        })\n\n        // add listeners to dropdowns\n        document.querySelector('#town').addEventListener('change', (event) => {\n            buildCard('town', event.target.value);\n        });\n        document.querySelector('#date').addEventListener('change', (event) => {\n            buildCard('date', event.target.value);\n        });\n\n        // search through the JSON and create an array of the data to be returned\n        // this passes in whether we are searching on town name or date (attribute),\n        // as well as the actual thing we are searching for (searchterm)\n        function searchJson(attribute, searchTerm){\n            let results = [];\n            // loop through JSOn to find objects that match the searchTerm\n            for (var i=0; i<data.length; i++) {\n                if (data[i][attribute] === searchTerm) {\n                    results.push(data[i]);\n                }\n            }\n            return results;\n        }\n\n        // build the actual card\n        function buildCard(attribute, searchTerm) {\n            // perform the search to get the data to display\n            let searchResult = searchJson(attribute, searchTerm);\n            let identifier = \"\";\n            // set the card's title to the either the town or date we searched for\n            document.getElementById('cardTitle').innerHTML = searchTerm;\n            // set an \"identifier\" or the specific attribute to differentiate entries\n            if (attribute === \"town\") {\n                identifier = \"date\";\n            } else if (attribute === \"date\") {\n                identifier = \"town\";\n            // This else should never happen\n            } else {\n                return \"Error, search invalid\";\n            }\n            // build up the entries\n            let result = searchResult.map(function(entry) {\n                // loop through all the returned objects we searched for\n                for (var attr in entry) {\n                    // return the entries as individual lines printed to the card\n                    return \"<div class='weakly-weather-item'> <p class='mb-0'> \" + entry[identifier] + \"</p> <p class='mb-0'>\" + entry.temperature + \"</p> <p class='mb-0'> \" + entry.weather + \"</p></div>\";\n                }}).join('');\n            document.getElementById('contents').innerHTML = result;\n        }\n        // Set default landing result as firsst town in JSON\n        buildCard('town', data[0].town);\n    });\n});\n","module.exports = __webpack_public_path__ + \"static/media/data.29b318a3.csv\";"],"sourceRoot":""}